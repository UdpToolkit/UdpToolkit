// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(3)
            {
                { typeof(global::Cubes.Shared.Events.JoinEvent), 0 },
                { typeof(global::Cubes.Shared.Events.MoveEvent), 1 },
                { typeof(global::Cubes.Shared.Events.SpawnEvent), 2 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.Cubes.Shared.Events.JoinEventFormatter();
                case 1: return new MessagePack.Formatters.Cubes.Shared.Events.MoveEventFormatter();
                case 2: return new MessagePack.Formatters.Cubes.Shared.Events.SpawnEventFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Cubes.Shared.Events
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class JoinEventFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Cubes.Shared.Events.JoinEvent>
    {

        public void Serialize(ref MessagePackWriter writer, global::Cubes.Shared.Events.JoinEvent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.RoomId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Nickname, options);
        }

        public global::Cubes.Shared.Events.JoinEvent Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(int);
            var __Nickname__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __RoomId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Nickname__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Cubes.Shared.Events.JoinEvent(__RoomId__, __Nickname__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MoveEventFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Cubes.Shared.Events.MoveEvent>
    {

        public void Serialize(ref MessagePackWriter writer, global::Cubes.Shared.Events.MoveEvent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.PlayerId);
            writer.Write(value.RoomId);
            writer.Write(value.Distance);
            writer.Write(value.Angle);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Quaternion>().Serialize(ref writer, value.Rotation, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.Direction, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.Position, options);
        }

        public global::Cubes.Shared.Events.MoveEvent Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerId__ = default(int);
            var __RoomId__ = default(int);
            var __Distance__ = default(float);
            var __Angle__ = default(float);
            var __Rotation__ = default(global::UnityEngine.Quaternion);
            var __Direction__ = default(global::UnityEngine.Vector3);
            var __Position__ = default(global::UnityEngine.Vector3);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __PlayerId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __RoomId__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Distance__ = reader.ReadSingle();
                        break;
                    case 3:
                        __Angle__ = reader.ReadSingle();
                        break;
                    case 4:
                        __Rotation__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Quaternion>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Direction__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Position__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Cubes.Shared.Events.MoveEvent(__PlayerId__, __RoomId__, __Distance__, __Angle__, __Rotation__, __Direction__, __Position__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SpawnEventFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Cubes.Shared.Events.SpawnEvent>
    {

        public void Serialize(ref MessagePackWriter writer, global::Cubes.Shared.Events.SpawnEvent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.PlayerId, options);
            writer.Write(value.RoomId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Nickname, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.Position, options);
        }

        public global::Cubes.Shared.Events.SpawnEvent Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerId__ = default(global::System.Guid);
            var __RoomId__ = default(int);
            var __Nickname__ = default(string);
            var __Position__ = default(global::UnityEngine.Vector3);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __PlayerId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RoomId__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Nickname__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Position__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Cubes.Shared.Events.SpawnEvent(__PlayerId__, __RoomId__, __Nickname__, __Position__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

